{"meta":{"title":"无糖咖啡 blog","subtitle":"inner peace","description":"","author":"李洋华","url":"https://erichmlyh.github.io","root":"/blog/"},"pages":[{"title":"","date":"2020-01-03T02:50:36.543Z","updated":"2020-01-03T02:50:36.543Z","comments":false,"path":"tags/index.html","permalink":"https://erichmlyh.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-01-03T04:30:19.669Z","updated":"2020-01-03T04:30:19.669Z","comments":true,"path":"categories/index.html","permalink":"https://erichmlyh.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue高阶组件","slug":"Vue高阶组件","date":"2020-01-07T08:41:18.000Z","updated":"2020-01-07T10:37:12.072Z","comments":true,"path":"2020/01/07/Vue高阶组件/","link":"","permalink":"https://erichmlyh.github.io/2020/01/07/Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/","excerpt":"","text":"高阶组件(HOC)全称 Higher-Order Components, 在React中复用代码最主要的方式，也是官方推荐的一种模式。然而，在Vue生态中，却很少采用，而是推荐mixin方式。本文不去对比这hoc和mixin这两种实现的优劣，旨在探索用hoc的方式去实现vue的高阶组件，并从中得到为何vue少于用hoc实现组件的复用。 什么是高阶组件说高阶组件之前，先来看下什么是高阶函数和组件 在维基百科中对高阶函数的定义。简单来说，就是传入参数有函数，返回的参数是一个函数。 组件，我们对比下react和vue: 对于react,组件的本质第一反应是class, 而class的本质是函数,当然纯函数组件也是函数。对于vue,组件的本质是表面来看是object, 其实Vue中组件是一个被包装的函数，并不简单的就是我们定义组件的时候传入的对象。 具体请参考组件的本质 所以，什么是高阶组件，其实就是高阶函数。对于vue，形式不太一样，需要参数传入一个对象，然后返回一个对象。 实现一个简单的vue高阶组件需求：记录一个组件活了多久，即统计下组件从mounted开始，到destroyed一共耗时多少ms。 12345678910111213141516// WithLifeTime.jsexport default function WithLifeTime(WrappedComponent) &#123; return &#123; mounted() &#123; this._startTime = +new Date &#125;, destroyed() &#123; console.log( `该组件的生命周期时长为： $&#123;+new Date() - this._startTime&#125;ms` ); &#125;, render(h) &#123; return h(WrappedComponent); &#125; &#125;&#125; 当WrappedComponent不需要和父组件进行任何通信的时候，发现，并没有任何问题。但是孤立的组件其实是没有太大的意义的。那么，需要怎么通信呢? 父子组件通信父子组件通信的方法很多，仅讨论vue本身实现，主要是： props 和 $emit v-slot provide &amp; inject 其中，1和2在做HOC时需要考虑，3不需要考虑 解决 props 和 $emit 通信方式需在高阶组件中申明props，否则实例化时，this.$props将是空对象。 123456789101112131415161718192021// WithLifeTime.jsexport default function WithLifeTime(WrappedComponent) &#123; return &#123; mounted() &#123; this._startTime = +new Date(); &#125;, props: WrappedComponent.props, // 不申明props,实例化时，this.$props将是空对象 destroyed() &#123; console.log( `该组件的生命周期时长为： $&#123;+new Date() - this._startTime&#125;ms` ); &#125;, render(h) &#123; return h(WrappedComponent, &#123; on: this.$listeners, attrs: this.$attrs, props: this.$props &#125;); &#125; &#125;;&#125; 上面组件完成了 1、透传 props2、透传没有被声明为 props 的属性3、透传事件 解决高阶组件v-slot的传递先看下 BaseComponent.vue的内容，该组件是被高阶组件包裹的组件，用于测试HOC组件功能是否正确。 123456789101112131415161718&lt;!-- BaseComponent.vue --&gt;&lt;template&gt; &lt;div class=\"base-component\"&gt; &lt;button @click=\"$emit('click', $event)\"&gt;props: &#123;&#123;text&#125;&#125;&lt;/button&gt; &lt;slot&gt;&lt;/slot&gt; &lt;slot name=\"namedSlot\" childToParent=\"fromBaseComponent.vue\"&gt;&lt;/slot&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'BaseComponent', props: &#123; text: String &#125;&#125;&lt;/script&gt; 测试代码，分别渲染BaseComponent.vue和被WithLifeTime包裹后的BaseComponent.vue 1234567891011121314151617181920212223242526272829303132&lt;!-- HoC.vue --&gt;&lt;template&gt; &lt;div class=\"hoc\" style=\"margin: 50px;\"&gt; &lt;base-component text=\"baseComponent\"&gt; &lt;p&gt;baseComponent 默认插槽&lt;/p&gt; &lt;template v-slot:namedSlot=\"&#123;childToParent&#125;\"&gt; &lt;p&gt;baseComponent 具名插槽; &#123;&#123; childToParent &#125;&#125;&lt;/p&gt; &lt;/template&gt; &lt;/base-component&gt; &lt;hr /&gt; &lt;wrapper-base-component text=\"wrapperBaseComponent\"&gt; &lt;p&gt;wrapperBaseComponent 默认插槽&lt;/p&gt; &lt;template v-slot:namedSlot=\"&#123;childToParent&#125;\"&gt; &lt;p&gt;wrapperBaseComponent 具名插槽; &#123;&#123; childToParent &#125;&#125;&lt;/p&gt; &lt;/template&gt; &lt;/wrapper-base-component&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import BaseComponent from \"./BaseComponent.vue\";import WithLifeTime from \"./WithLifeTime\";export default &#123; name: \"Hoc\", components: &#123; BaseComponent, WrapperBaseComponent: WithLifeTime(BaseComponent) &#125;&#125;;&lt;/script&gt; 在WithLifeTime.js未对slot做处理的情况下，看下运行结果，可以看出，slot未生效。 下面，我们更改下WithLifeTime 123456789101112131415161718192021222324252627282930export default function WithLifeTime(WrappedComponent) &#123; return &#123; mounted() &#123; this._startTime = +new Date(); &#125;, props: WrappedComponent.props, // 不申明props,实例化时，this.$props将是空对象 destroyed() &#123; console.log( `该组件的生命周期时长为： $&#123;+new Date() - this._startTime&#125;ms` ); &#125;, render(h) &#123; // 将 this.$scopedSlots 格式化为数组 const children = Object.keys(this.$scopedSlots).reduce( (arr, key) =&gt; arr.concat(this.$scopedSlots[key]()), [] ); return h( WrappedComponent, &#123; on: this.$listeners, attrs: this.$attrs, props: this.$props &#125;, children ); &#125; &#125;;&#125; 查看运行结果，有两个问题： 默认插槽和具名插槽顺序有问题 scopedSlots的值没穿进去 先来看第一个，顺序问题：vue在渲染具名slot的时候，会对比$vnode.context（用来表示渲染该组件的上下文）,BaseComponent.vue中的具名slot渲染成的vnode拿到的context是HoC的上下文；但是BaseComponent.vue的上下文环境是在WithLifeTime中。所以传入的具名组件被当成了默认组件。更改后的WithLifeTime 12345678910111213141516171819202122232425262728293031323334// WithLifeTime.jsexport default function WithLifeTime(WrappedComponent) &#123; return &#123; mounted() &#123; this._startTime = +new Date(); &#125;, props: WrappedComponent.props, // 不申明props,实例化时，this.$props将是空对象 destroyed() &#123; console.log( `该组件的生命周期时长为： $&#123;+new Date() - this._startTime&#125;ms` ); &#125;, render(h) &#123; // 将 this.$scopedSlots 格式化为数组 const children = Object.keys(this.$scopedSlots) .reduce((arr, key) =&gt; arr.concat(this.$scopedSlots[key]()), []) .map(vnode =&gt; &#123; vnode.context = this._self; return vnode; &#125;); return h( WrappedComponent, &#123; on: this.$listeners, attrs: this.$attrs, props: this.$props &#125;, children ); &#125; &#125;;&#125; 结果： scopedSlots值没传递下去（先待定，找时间补上） 后记文中的源码已上传github 本文只提及部分关于vue HOC的实现，对于指令、style、class、domProps等未做讨论，所以对于项目实践中，vue HOC应用相对没那么广泛。在vue 3.0的rfcs中，vnode做出了相应的调整,且看之后发展进程。 对于组件的复用，在React 16.8后引入React Hook， vue 3.0又提出 Composition API。 或许借鉴，但总归是殊途同归。 提及或相关但未展开的内容： 技术没有银弹，HOC也不例外，有兴趣可以看下Michael Jackson - Never Write Another HoC 为何react生态没有采用minxin，可参考Mixins Considered Harmful vue中，对具名slot关于context处理的源码部分 vue中，_self指向自己源码部分 vue的vNode定义在源码中的位 vue 3.0中，对于context将不绑定到vNode实例上，这意味着更加灵活的组件声明位置（不止在.vue文件中，不需要到处传递h参数）; 详见vue rfcs, 其中原文内容： In 3.0 we have found ways to make VNodes context-free. They can now be created anywhere using the globally imported h function, so it only needs to be imported once in any file. 社区关于vue HOC 的讨论 Discussion: Best way to create a HOC","categories":[{"name":"技术","slug":"技术","permalink":"https://erichmlyh.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://erichmlyh.github.io/tags/vue/"},{"name":"javascript","slug":"javascript","permalink":"https://erichmlyh.github.io/tags/javascript/"},{"name":"HoC","slug":"HoC","permalink":"https://erichmlyh.github.io/tags/HoC/"}]},{"title":"2020目标","slug":"2020目标","date":"2020-01-03T04:36:44.999Z","updated":"2020-01-03T04:43:57.618Z","comments":true,"path":"2020/01/03/2020目标/","link":"","permalink":"https://erichmlyh.github.io/2020/01/03/2020%E7%9B%AE%E6%A0%87/","excerpt":"","text":"家庭目标 财务上 家庭整理收入，存款增加**** lyh上缴****大洋，方式不论（理财也算） 实现较为合理的财富分配（相对高风险、稳定收入、抵御分险的现金部分的比例） 提高非工资收入的占比，目标10%； 家庭和谐上 苗苗帮我理发三次 一起为家人做一顿饭 每周独立带娃一天（做饭除外，不要求其他人一起帮忙带，可让其他人自由的玩耍，当然小麦主动要求是小麦的权利） 个人目标 能力上 内容管理：内容整理能力（归档文件、书签栏、思绪等）。 时间管理：对时间的的利用率更高：不要出现为了消磨时间而浪费。 金钱管理：让投资更有规划，对于风口性的东西，有参与意识，而非观众 向上管理 向下管理 做事，懂得轻重缓急； 学习上 宏观、微观经济学有一定了解 对股票术语至少能听懂 深入vue3.0（若工作上还是vue技术栈）的技术栈； 若是react，深入react hook及react技术栈 做一个开源项目，努力达到100star以上 工作上 主导工作上技术的选型 对业务有自己的思考 健康上 保证平均每天半小时运动（打篮球、仰卧起坐，靠墙站也算） 可落地检验的指标 每晚睡前10分钟，回顾下一天的事情 10本书，并有相关读书笔记活心得 产出50篇技术文章，发表地点暂定掘金 非必要，11点半前睡觉 2020年年底，体重稳定在130斤左右 腹部无赘肉，细看能找到6块腹肌的纹路 带小麦去稍微远点的地方（需要过夜那种）地方玩，有条件带着父母也远游下 至少主动策划三次有仪式感的节日 5年，更长 个人成长: 待稳定后规划 家庭财务: 加上房产2025年 ****","categories":[{"name":"生活","slug":"生活","permalink":"https://erichmlyh.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"规划","slug":"规划","permalink":"https://erichmlyh.github.io/tags/%E8%A7%84%E5%88%92/"},{"name":"目标","slug":"目标","permalink":"https://erichmlyh.github.io/tags/%E7%9B%AE%E6%A0%87/"}]}]}