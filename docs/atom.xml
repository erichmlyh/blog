<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无糖咖啡 blog</title>
  
  <subtitle>inner peace</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://erichmlyh.github.io/"/>
  <updated>2020-01-07T11:35:55.612Z</updated>
  <id>https://erichmlyh.github.io/</id>
  
  <author>
    <name>李洋华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue高阶组件</title>
    <link href="https://erichmlyh.github.io/2020/01/07/Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    <id>https://erichmlyh.github.io/2020/01/07/Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</id>
    <published>2020-01-07T08:41:18.000Z</published>
    <updated>2020-01-07T11:35:55.612Z</updated>
    
    <content type="html"><![CDATA[<p>高阶组件(<code>HOC</code>)全称 <code>Higher-Order Components</code>, 在<code>React</code>中复用代码最主要的方式，也是<a href="http://react.html.cn/docs/higher-order-components.html" target="_blank" rel="noopener">官方推荐</a>的一种模式。然而，在<code>Vue</code>生态中，却很少采用，而是推荐<a href="(https://cn.vuejs.org/v2/guide/mixins.html)">mixin</a>方式。<br>本文不去对比这<code>hoc</code>和<code>mixin</code>这两种实现的优劣，旨在探索用<code>hoc</code>的方式去实现<code>vue</code>的高阶组件，并从中得到为何<code>vue</code>少于用<code>hoc</code>实现组件的复用。</p><h2 id="什么是高阶组件"><a href="#什么是高阶组件" class="headerlink" title="什么是高阶组件"></a>什么是高阶组件</h2><p>说高阶组件之前，先来看下什么是<code>高阶函数</code>和<code>组件</code></p><p>在维基百科中对<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">高阶函数</a>的定义。简单来说，就是传入参数有函数，返回的参数是一个函数。</p><p>组件，我们对比下<code>react</code>和<code>vue</code>: </p><p>对于<code>react</code>,组件的本质第一反应是<code>class</code>, 而<code>class</code>的本质是函数,当然纯函数组件也是函数。<br>对于<code>vue</code>,组件的本质是表面来看是<code>object</code>, 其实<code>Vue</code>中组件是一个被包装的函数，并不简单的就是我们定义组件的时候传入的对象。 具体请参考<a href="http://hcysun.me/vue-design/zh/essence-of-comp.html#%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%A7%E5%87%BA%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">组件的本质</a></p><p>所以，什么是高阶组件，其实就是高阶函数。对于<code>vue</code>，形式不太一样，需要参数传入一个对象，然后返回一个对象。</p><h2 id="实现一个简单的vue高阶组件"><a href="#实现一个简单的vue高阶组件" class="headerlink" title="实现一个简单的vue高阶组件"></a>实现一个简单的vue高阶组件</h2><p>需求：记录一个组件活了多久，即统计下组件从<code>mounted</code>开始，到<code>destroyed</code>一共耗时多少ms。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WithLifeTime.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithLifeTime</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            <span class="keyword">this</span>._startTime = +<span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(</span><br><span class="line">              <span class="string">`该组件的生命周期时长为： <span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="keyword">this</span>._startTime&#125;</span>ms`</span></span><br><span class="line">            );</span><br><span class="line">        &#125;,</span><br><span class="line">        render(h) &#123;</span><br><span class="line">            <span class="keyword">return</span> h(WrappedComponent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>WrappedComponent</code>不需要和父组件进行任何通信的时候，发现，并没有任何问题。但是孤立的组件其实是没有太大的意义的。那么，需要怎么通信呢?</p><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><p>父子组件通信的方法很多，仅讨论<code>vue</code>本身实现，主要是：</p><ol><li><code>props</code> 和 <code>$emit</code></li><li><code>v-slot</code></li><li><code>provide</code> &amp; <code>inject</code> </li></ol><p>其中，<code>1</code>和<code>2</code>在做<code>HOC</code>时需要考虑，<code>3</code>不需要考虑</p><h2 id="解决-props-和-emit-通信方式"><a href="#解决-props-和-emit-通信方式" class="headerlink" title="解决 props 和 $emit 通信方式"></a>解决 <code>props</code> 和 <code>$emit</code> 通信方式</h2><p>需在高阶组件中申明<code>props</code>，否则实例化时，<code>this.$props</code>将是空对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WithLifeTime.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithLifeTime</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      mounted() &#123;</span><br><span class="line">        <span class="keyword">this</span>._startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">      props: WrappedComponent.props, <span class="comment">// 不申明props,实例化时，this.$props将是空对象</span></span><br><span class="line">      destroyed() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">`该组件的生命周期时长为： <span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="keyword">this</span>._startTime&#125;</span>ms`</span></span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">      render(h) &#123;</span><br><span class="line">        <span class="keyword">return</span> h(WrappedComponent, &#123;</span><br><span class="line">          on: <span class="keyword">this</span>.$listeners,</span><br><span class="line">          attrs: <span class="keyword">this</span>.$attrs,</span><br><span class="line">          props: <span class="keyword">this</span>.$props</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面组件完成了</p><blockquote><p>1、透传 props<br>2、透传没有被声明为 props 的属性<br>3、透传事件</p></blockquote><h2 id="解决高阶组件v-slot的传递"><a href="#解决高阶组件v-slot的传递" class="headerlink" title="解决高阶组件v-slot的传递"></a>解决高阶组件<code>v-slot</code>的传递</h2><p>先看下 <code>BaseComponent.vue</code>的内容，该组件是被高阶组件包裹的组件，用于测试<code>HOC</code>组件功能是否正确。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- BaseComponent.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"base-component"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$emit('click', $event)"</span>&gt;</span>props: &#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"namedSlot"</span> <span class="attr">childToParent</span>=<span class="string">"fromBaseComponent.vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript"> name: <span class="string">'BaseComponent'</span>,</span></span><br><span class="line"> props: &#123;</span><br><span class="line"><span class="javascript">   text: <span class="built_in">String</span></span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码，分别渲染<code>BaseComponent.vue</code>和被<code>WithLifeTime</code>包裹后的<code>BaseComponent.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HoC.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hoc"</span> <span class="attr">style</span>=<span class="string">"margin: 50px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-component</span> <span class="attr">text</span>=<span class="string">"baseComponent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>baseComponent 默认插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:namedSlot</span>=<span class="string">"&#123;childToParent&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>baseComponent 具名插槽; &#123;&#123; childToParent &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wrapper-base-component</span> <span class="attr">text</span>=<span class="string">"wrapperBaseComponent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>wrapperBaseComponent 默认插槽<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:namedSlot</span>=<span class="string">"&#123;childToParent&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>wrapperBaseComponent 具名插槽; &#123;&#123; childToParent &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wrapper-base-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> BaseComponent <span class="keyword">from</span> <span class="string">"./BaseComponent.vue"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> WithLifeTime <span class="keyword">from</span> <span class="string">"./WithLifeTime"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"Hoc"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseComponent,</span><br><span class="line">    WrapperBaseComponent: WithLifeTime(BaseComponent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>WithLifeTime.js</code>未对<code>slot</code>做处理的情况下，看下运行结果，可以看出，<code>slot</code>未生效。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2020/01/07/Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/noslot.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>下面，我们更改下<code>WithLifeTime</code>, 增加 <code>scopedSlots: this.$scopedSlots</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithLifeTime</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="keyword">this</span>._startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    props: WrappedComponent.props, <span class="comment">// 不申明props,实例化时，this.$props将是空对象</span></span><br><span class="line">    destroyed() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`该组件的生命周期时长为： <span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="keyword">this</span>._startTime&#125;</span>ms`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    render(h) &#123;</span><br><span class="line">      <span class="keyword">return</span> h(</span><br><span class="line">        WrappedComponent,</span><br><span class="line">        &#123;</span><br><span class="line">          on: <span class="keyword">this</span>.$listeners,</span><br><span class="line">          attrs: <span class="keyword">this</span>.$attrs,</span><br><span class="line">          props: <span class="keyword">this</span>.$props,</span><br><span class="line">          scopedSlots: <span class="keyword">this</span>.$scopedSlots</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2020/01/07/Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/emptySlot.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这是因为没有把<code>$slots</code>透传进去，我们处理下<code>$slots</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WithLifeTime</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="keyword">this</span>._startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    props: WrappedComponent.props, <span class="comment">// 不申明props,实例化时，this.$props将是空对象</span></span><br><span class="line">    destroyed() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`该组件的生命周期时长为： <span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>() - <span class="keyword">this</span>._startTime&#125;</span>ms`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    render(h) &#123;</span><br><span class="line">      <span class="comment">/// 将 this.$slots 转化为数组</span></span><br><span class="line">      <span class="keyword">const</span> children = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.$slots)</span><br><span class="line">        .reduce(<span class="function">(<span class="params">arr, key</span>) =&gt;</span> arr.concat(<span class="keyword">this</span>.$slots[key]), [])</span><br><span class="line">        .map(<span class="function"><span class="params">vnode</span> =&gt;</span> &#123;</span><br><span class="line">          vnode.context = <span class="keyword">this</span>._self;</span><br><span class="line">          <span class="keyword">return</span> vnode;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> h(</span><br><span class="line">        WrappedComponent,</span><br><span class="line">        &#123;</span><br><span class="line">          on: <span class="keyword">this</span>.$listeners,</span><br><span class="line">          attrs: <span class="keyword">this</span>.$attrs,</span><br><span class="line">          props: <span class="keyword">this</span>.$props,</span><br><span class="line">          scopedSlots: <span class="keyword">this</span>.$scopedSlots</span><br><span class="line">        &#125;,</span><br><span class="line">        children</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释下<code>第16行</code>为什么要用map处理下<code>context</code>:<br><code>vue</code>在渲染不带参数的具名插槽的时候，会对比<code>$vnode.context</code>（用来表示渲染该组件的上下文）,<code>BaseComponent.vue</code>中的具名slot渲染成的<code>vnode</code>拿到的<code>context</code>是<code>HoC</code>的上下文；但是<code>BaseComponent.vue</code>的上下文环境是在<code>WithLifeTime</code>中。所以传入的不带参数具名组件被当成了默认组件。</p><p>如果将<code>map</code>去掉, <code>BaseComponent</code>实例化后拿到的<code>$slot</code>值会不一致；</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2020/01/07/Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/mapSlots.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>文中的<a href="https://github.com/erichmlyh/vueDemo/tree/master/components/HoC" target="_blank" rel="noopener">源码</a>已上传<code>github</code></p><p>本文只提及部分关于<code>vue HOC</code>的实现，对于<code>指令</code>、<code>style</code>、<code>class</code>、<code>domProps</code>等未做讨论，所以对于项目实践中，<code>vue HOC</code>应用相对没那么广泛。在<code>vue 3.0</code>的<code>rfcs</code>中，<code>vnode</code>做出了相应的调整,且看之后发展进程。</p><p>对于组件的复用，在<code>React 16.8</code>后引入<code>React Hook</code>， <code>vue 3.0</code>又提出 <code>Composition API</code>。 或许借鉴，但总归是殊途同归。</p><p>提及或相关但未展开的内容：</p><blockquote><ol><li>技术没有银弹，<code>HOC</code>也不例外，有兴趣可以看下<a href="https://www.youtube.com/watch?reload=9&v=BcVAq3YFiuc" target="_blank" rel="noopener">Michael Jackson - Never Write Another HoC</a></li><li>为何<code>react</code>生态没有采用<code>minxin</code>，可参考<a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html" target="_blank" rel="noopener">Mixins Considered Harmful</a></li><li><code>vue</code>中，对具名<code>slot</code>关于<code>context</code>处理的<a href="https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-slots.js#L23-L34" target="_blank" rel="noopener">源码</a>部分</li><li><code>vue</code>中，<code>_self</code>指向自己<a href="https://github.com/vuejs/vue/blob/dev/src/core/instance/init.js#L50-L51" target="_blank" rel="noopener">源码</a>部分</li><li><code>vue</code>的<code>vNode</code>定义在<a href="https://github.com/vuejs/vue/blob/dev/src/core/vdom/vnode.js#L10" target="_blank" rel="noopener">源码</a>中的位</li><li><code>vue 3.0</code>中，对于<code>context</code>将不绑定到<code>vNode</code>实例上，这意味着更加灵活的组件声明位置（不止在.vue文件中，不需要到处传递h参数）; 详见<a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0008-render-function-api-change.md" target="_blank" rel="noopener">vue rfcs</a>, 其中原文内容： <code>In 3.0 we have found ways to make VNodes context-free. They can now be created anywhere using the globally imported h function, so it only needs to be imported once in any file.</code></li><li>社区关于<code>vue HOC</code> 的讨论 <a href="https://github.com/vuejs/vue/issues/6201" target="_blank" rel="noopener">Discussion: Best way to create a HOC</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;高阶组件(&lt;code&gt;HOC&lt;/code&gt;)全称 &lt;code&gt;Higher-Order Components&lt;/code&gt;, 在&lt;code&gt;React&lt;/code&gt;中复用代码最主要的方式，也是&lt;a href=&quot;http://react.html.cn/docs/higher
      
    
    </summary>
    
    
      <category term="技术" scheme="https://erichmlyh.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="vue" scheme="https://erichmlyh.github.io/tags/vue/"/>
    
      <category term="javascript" scheme="https://erichmlyh.github.io/tags/javascript/"/>
    
      <category term="HoC" scheme="https://erichmlyh.github.io/tags/HoC/"/>
    
  </entry>
  
  <entry>
    <title>2020目标</title>
    <link href="https://erichmlyh.github.io/2020/01/03/2020%E7%9B%AE%E6%A0%87/"/>
    <id>https://erichmlyh.github.io/2020/01/03/2020%E7%9B%AE%E6%A0%87/</id>
    <published>2020-01-03T04:36:44.999Z</published>
    <updated>2020-01-03T04:43:57.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="家庭目标"><a href="#家庭目标" class="headerlink" title="家庭目标"></a>家庭目标</h2><ul><li>财务上<ul><li>家庭整理收入，存款增加****</li><li>lyh上缴****大洋，方式不论（理财也算）</li><li>实现较为合理的财富分配（相对高风险、稳定收入、抵御分险的现金部分的比例）</li><li>提高非工资收入的占比，目标10%；</li></ul></li><li>家庭和谐上<ul><li>苗苗帮我理发三次</li><li>一起为家人做一顿饭</li><li>每周独立带娃一天（做饭除外，不要求其他人一起帮忙带，可让其他人自由的玩耍，当然小麦主动要求是小麦的权利）</li></ul></li></ul><hr><h2 id="个人目标"><a href="#个人目标" class="headerlink" title="个人目标"></a>个人目标</h2><ul><li>能力上<ul><li>内容管理：内容整理能力（归档文件、书签栏、思绪等）。</li><li>时间管理：对时间的的利用率更高：不要出现为了消磨时间而浪费。</li><li>金钱管理：让投资更有规划，对于风口性的东西，有参与意识，而非观众</li><li>向上管理</li><li>向下管理</li><li>做事，懂得轻重缓急；</li></ul></li><li>学习上<ul><li>宏观、微观经济学有一定了解</li><li>对股票术语至少能听懂</li><li>深入vue3.0（若工作上还是vue技术栈）的技术栈； 若是react，深入react hook及react技术栈</li><li>做一个开源项目，努力达到100star以上</li></ul></li><li>工作上<ul><li>主导工作上技术的选型</li><li>对业务有自己的思考</li></ul></li><li>健康上<ul><li>保证平均每天半小时运动（打篮球、仰卧起坐，靠墙站也算）</li></ul></li><li>可落地检验的指标<ul><li><strong>每晚睡前10分钟，回顾下一天的事情</strong></li><li>10本书，并有相关读书笔记活心得</li><li>产出50篇技术文章，发表地点暂定掘金</li><li><strong>非必要，11点半前睡觉</strong></li><li>2020年年底，体重稳定在130斤左右</li><li>腹部无赘肉，细看能找到6块腹肌的纹路</li><li>带小麦去稍微远点的地方（需要过夜那种）地方玩，有条件带着父母也远游下</li><li>至少主动策划三次有仪式感的节日</li></ul></li></ul><hr><h2 id="5年，更长"><a href="#5年，更长" class="headerlink" title="5年，更长"></a>5年，更长</h2><ul><li>个人成长: 待稳定后规划</li><li>家庭财务: 加上房产2025年 ****</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;家庭目标&quot;&gt;&lt;a href=&quot;#家庭目标&quot; class=&quot;headerlink&quot; title=&quot;家庭目标&quot;&gt;&lt;/a&gt;家庭目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;财务上&lt;ul&gt;
&lt;li&gt;家庭整理收入，存款增加****&lt;/li&gt;
&lt;li&gt;lyh上缴****大洋，方式不论（理财
      
    
    </summary>
    
    
      <category term="生活" scheme="https://erichmlyh.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="规划" scheme="https://erichmlyh.github.io/tags/%E8%A7%84%E5%88%92/"/>
    
      <category term="目标" scheme="https://erichmlyh.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
</feed>
